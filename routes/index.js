var express = require('express');
var router = express.Router();
// require fabric clients
var utils = require('fabric-client/lib/utils.js');
var logger = utils.getLogger('unit.client');

var tape = require('tape');
var _test = require('tape-promise');
var test = _test(tape);
var util = require('util');
var sinon = require('sinon');

var Client = require('fabric-client');
var utils = require('fabric-client/lib/utils.js');
var User = require('fabric-client/lib/User.js');
var Peer = require('fabric-client/lib/Peer.js');
var NetworkConfig = require('fabric-client/lib/impl/NetworkConfig_1_0.js');
//var testutil = require('util.js');


/* GET home page. */
router.get('/', function(req, res, next) {
	var channel_on_org1 = null;
	var channel_name = 'mychannel';
	var client_org1 = Client.loadFromConfig('/opt/gopath/src/github.com/deevotech/config-hyperledger-fabric-bftsmart/config/mynetwork.yaml');
	var client_org2 = Client.loadFromConfig('/opt/gopath/src/github.com/deevotech/config-hyperledger-fabric-bftsmart/config/mynetwork.yaml');
	client_org1.loadFromConfig('/opt/gopath/src/github.com/deevotech/config-hyperledger-fabric-bftsmart/config/myorg1.yaml');
	client_org2.loadFromConfig('/opt/gopath/src/github.com/deevotech/config-hyperledger-fabric-bftsmart/config/myorg2.yaml');
	var result = client_org1.initCredentialStores()
	.then((nothing) => {
		// get the CA associated with this client's organization
		let caService = client_org1.getCertificateAuthority();
		let request = {
			enrollmentID: 'rca-org1-admin',
			enrollmentSecret: 'rca-org1-adminpw',
			profile: 'tls'
		};
		return caService.enroll(request);
	}).then((enrollment) => {
		let key = enrollment.key.toBytes();
		let cert = enrollment.certificate;

		// set the material on the client to be used when building endpoints for the user
		client_org1.setTlsClientCertAndKey(cert, key);

		let envelope_bytes = fs.readFileSync(path.join(__dirname, '../fixtures/channel/mychannel.tx'));
		// have the sdk get the config update object from the envelope generated by configtxgen
		// the config update object is what is required to be signed by all
		// participating organizations
		config = client_org1.extractChannelConfig(envelope_bytes);
		t.pass('Successfully extracted the config update from the configtx envelope');

		// Sign the config bytes
		// ---- the signChannelConfig() will have the admin identity sign the
		//      config if the client instance has been assigned an admin otherwise
		//      it will use the currently user context assigned. When loading a
		//      connection profile that has a client section that also has
		//      an admin defined for the organization defined in that client
		//      section it will be automatically assigned to the client instance.
		let signature1 = client_org1.signChannelConfig(config);
		// convert signature to a storable string
		// fabric-client SDK will convert any strings it finds back
		// to GRPC protobuf objects during the channel create
		let string_signature1 = signature1.toBuffer().toString('hex');
		t.pass('Successfully signed config update by org1');
		// collect signature from org1 admin
		signatures.push(string_signature1);

		// sign the config by admin from org2
		let signature2 = client_org2.signChannelConfig(config);
		t.pass('Successfully signed config update for org2');

		// collect the signature from org2's admin
		signatures.push(signature2);

		// now we have enough signatures...

		// get an admin based transaction
		// in this case we are assuming that the connection profile
		// has an admin defined for the current organization defined in the
		// client part of the connection profile, otherwise the setAdminSigningIdentity()
		// method would need to be called to setup the admin. If no admin is in the config
		// or has been assigned the transaction will based on the current user.
		let tx_id = client_org2.newTransactionID(true);
		// build up the create request
		let request = {
			config: config,
			signatures : signatures,
			name : channel_name,
			orderer : 'orderer.example.com', //this assumes we have loaded a connection profile
			txId  : tx_id
		};

		// send create request to orderer
		return client_org2.createChannel(request); //admin from org2
	});
	//console.log(result);
	res.render('index', { title: 'Express' });
});

module.exports = router;
